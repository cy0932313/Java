<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chris.quantification.dao.IOperateTableDao">

    <resultMap id="BaseResultMap_symbolMonitor" type="com.chris.quantification.domain.SymbolMonitor">
        <result column="symbolCode" property="symbolCode" jdbcType="VARCHAR"/>
        <result column="symbolName" property="symbolName" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="queryInfoForMonitorSymbol" resultMap="BaseResultMap_symbolMonitor">
        SELECT * from monitor_symbol
    </select>


    <resultMap id="BaseResultMap_symbolHold" type="com.chris.quantification.domain.SymbolHold">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="symbolCode" property="symbolCode" jdbcType="VARCHAR"/>
        <result column="symbolName" property="symbolName" jdbcType="VARCHAR"/>
        <result column="buyPrice" property="buyPrice" jdbcType="VARCHAR"/>
        <result column="buyTime" property="buyTime" jdbcType="VARCHAR"/>
        <result column="isETF" property="isETF" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="queryInfoForHoldSymbol" resultMap="BaseResultMap_symbolHold">
        SELECT * from hold_symbol
    </select>

    <resultMap id="BaseResultMap_HoldRecord" type="com.chris.quantification.domain.HoldRecord">
        <result column="ID" property="ID" jdbcType="INTEGER"/>
        <result column="symbolCode" property="symbolCode" jdbcType="VARCHAR"/>
        <result column="symbolName" property="symbolName" jdbcType="VARCHAR"/>
        <result column="open" property="open" jdbcType="VARCHAR"/>
        <result column="close" property="close" jdbcType="VARCHAR"/>
        <result column="high" property="high" jdbcType="VARCHAR"/>
        <result column="low" property="low" jdbcType="VARCHAR"/>
        <result column="previous_cci" property="previous_cci" jdbcType="VARCHAR"/>
        <result column="cci" property="cci" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="VARCHAR"/>
        <result column="groupID" property="groupID" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="queryInfoForHoldRecord" resultMap="BaseResultMap_HoldRecord">
        SELECT * from hold_record where groupID = ${groupID} ORDER BY time LIMIT 1,1000000000
    </select>

    <resultMap id="BaseResultMap_tips" type="com.chris.quantification.domain.Tips">
        <result column="oversold" property="oversold" jdbcType="VARCHAR"/>
        <result column="normal" property="normal" jdbcType="VARCHAR"/>
        <result column="overbought" property="overbought" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="queryInfoForTips" resultMap="BaseResultMap_tips">
        select IFNULL(t.cci,0) as'oversold',IFNULL(t1.cci,0) as 'normal',IFNULL(t2.cci,0) as 'overbought',t.time as 'time'
        FROM (
        SELECT count(*) as cci,time FROM monitor_record t
        WHERE cci &lt; -100 GROUP BY time ) t
        LEFT JOIN (
        SELECT count(*) as cci,time FROM monitor_record
        WHERE cci &gt; -100 and cci &lt; 100  GROUP BY time
        ) t1
        ON t.time = t1.time
        LEFT JOIN (SELECT count(*) as cci,time FROM monitor_record
        WHERE cci &gt; 100 GROUP BY time ) t2
        ON t.time = t2.time and t1.time = t2.time
        ORDER BY  time desc LIMIT 3
    </select>

    <!--<update id="updateInfo">-->
        <!--UPDATE ${tableName} SET ${feild} = ${feildValue} WHERE ${condition} = ${conditionValue}-->
    <!--</update>-->

    <insert id="addMonitorRecord">
        replace into monitor_record
        (symbolCode, symbolName,cci,time)
        values
        (#{monitorRecord.symbolCode},
        #{monitorRecord.symbolName},
        #{monitorRecord.cci},
        #{monitorRecord.time}
        )
    </insert>

    <insert id="addHoldRecord">
        replace into hold_record
        (symbolCode, symbolName,open,close,high,low,previous_cci,cci,time,groupID)
        values
        (#{holdRecord.symbolCode},
        #{holdRecord.symbolName},
        #{holdRecord.open},
        #{holdRecord.close},
        #{holdRecord.high},
        #{holdRecord.low},
        #{holdRecord.previous_cci},
        #{holdRecord.cci},
        #{holdRecord.time},
        #{holdRecord.groupID}
        )
    </insert>

</mapper>